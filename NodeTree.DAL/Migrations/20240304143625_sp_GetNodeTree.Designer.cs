// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NodeTree.DAL.Contexts;

#nullable disable

namespace NodeTree.DAL.Migrations
{
    [DbContext(typeof(NodeTreeDBContext))]
    [Migration("20240304143625_sp_GetNodeTree")]
    partial class sp_GetNodeTree
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("NodeTree.DAL.Entities.TreeNode", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DeletedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ModifiedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<int?>("ParentNodeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParentNodeId");

                    b.ToTable("TreeNodes");
                });

            modelBuilder.Entity("NodeTree.DAL.Entities.TreeNode", b =>
                {
                    b.HasOne("NodeTree.DAL.Entities.TreeNode", "ParentNode")
                        .WithMany("Children")
                        .HasForeignKey("ParentNodeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ParentNode");
                });

            modelBuilder.Entity("NodeTree.DAL.Entities.TreeNode", b =>
                {
                    b.Navigation("Children");
                });
#pragma warning restore 612, 618
        }
    }
}
